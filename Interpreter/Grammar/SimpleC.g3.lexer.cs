//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 Grammar\\SimpleC.g 2015-10-06 18:13:40

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


#pragma warning disable 3021


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  SimpleC.Grammar 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SimpleCLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int ADD=4;
	public const int ASSIGN=5;
	public const int BIT_AND=6;
	public const int BIT_NOT=7;
	public const int BIT_OR=8;
	public const int BIT_XOR=9;
	public const int BOOL_AND=10;
	public const int BOOL_NOT=11;
	public const int BOOL_OR=12;
	public const int DEC_POST=13;
	public const int DEC_PRE=14;
	public const int DEREF=15;
	public const int DIV=16;
	public const int EQUAL=17;
	public const int EXPRESSION=18;
	public const int FUNC_BODY=19;
	public const int FUNC_CALL=20;
	public const int FUNC_DECL=21;
	public const int FUNC_DEF=22;
	public const int GREATER=23;
	public const int GREATER_OR_EQUAL=24;
	public const int IDENT=25;
	public const int INC_POST=26;
	public const int INC_PRE=27;
	public const int INTEGER=28;
	public const int Identifier=29;
	public const int Int=30;
	public const int Integer=31;
	public const int LESS=32;
	public const int LESS_OR_EQUAL=33;
	public const int MOD=34;
	public const int MUL=35;
	public const int NOT_EQUAL=36;
	public const int PARAM_LIST=37;
	public const int PARAM_SPEC_LIST=38;
	public const int PROGRAM=39;
	public const int REF=40;
	public const int SHIFT_LEFT=41;
	public const int SHIFT_RIGHT=42;
	public const int SIZEOF_EXPR=43;
	public const int SIZEOF_TYPE=44;
	public const int STATEMENT=45;
	public const int STRUCT_DEREF=46;
	public const int STRUCT_MEMBER=47;
	public const int SUB=48;
	public const int SUBSCRIPT=49;
	public const int SizeOf=50;
	public const int TYPECAST=51;
	public const int TYPE_SPEC=52;
	public const int U_MINUS=53;
	public const int U_PLUS=54;
	public const int VAR_CALL=55;
	public const int VAR_DECL=56;
	public const int VAR_DEF=57;
	public const int VAR_SPEC=58;
	public const int Void=59;
	public const int Whitespace=60;

    // delegates
    // delegators

	public SimpleCLexer()
	{
		OnCreated();
	}

	public SimpleCLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public SimpleCLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "Grammar\\SimpleC.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_ADD();
	partial void LeaveRule_ADD();

	// $ANTLR start "ADD"
	[GrammarRule("ADD")]
	private void mADD()
	{
		EnterRule_ADD();
		EnterRule("ADD", 1);
		TraceIn("ADD", 1);
		try
		{
			int _type = ADD;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:13:5: ( '+' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:13:7: '+'
			{
			DebugLocation(13, 7);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ADD", 1);
			LeaveRule("ADD", 1);
			LeaveRule_ADD();
		}
	}
	// $ANTLR end "ADD"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 2);
		TraceIn("ASSIGN", 2);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:14:8: ( '=' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:14:10: '='
			{
			DebugLocation(14, 10);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 2);
			LeaveRule("ASSIGN", 2);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_BIT_AND();
	partial void LeaveRule_BIT_AND();

	// $ANTLR start "BIT_AND"
	[GrammarRule("BIT_AND")]
	private void mBIT_AND()
	{
		EnterRule_BIT_AND();
		EnterRule("BIT_AND", 3);
		TraceIn("BIT_AND", 3);
		try
		{
			int _type = BIT_AND;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:15:9: ( '&' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:15:11: '&'
			{
			DebugLocation(15, 11);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BIT_AND", 3);
			LeaveRule("BIT_AND", 3);
			LeaveRule_BIT_AND();
		}
	}
	// $ANTLR end "BIT_AND"

	partial void EnterRule_BIT_OR();
	partial void LeaveRule_BIT_OR();

	// $ANTLR start "BIT_OR"
	[GrammarRule("BIT_OR")]
	private void mBIT_OR()
	{
		EnterRule_BIT_OR();
		EnterRule("BIT_OR", 4);
		TraceIn("BIT_OR", 4);
		try
		{
			int _type = BIT_OR;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:16:8: ( '|' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:16:10: '|'
			{
			DebugLocation(16, 10);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BIT_OR", 4);
			LeaveRule("BIT_OR", 4);
			LeaveRule_BIT_OR();
		}
	}
	// $ANTLR end "BIT_OR"

	partial void EnterRule_BIT_XOR();
	partial void LeaveRule_BIT_XOR();

	// $ANTLR start "BIT_XOR"
	[GrammarRule("BIT_XOR")]
	private void mBIT_XOR()
	{
		EnterRule_BIT_XOR();
		EnterRule("BIT_XOR", 5);
		TraceIn("BIT_XOR", 5);
		try
		{
			int _type = BIT_XOR;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:17:9: ( '^' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:17:11: '^'
			{
			DebugLocation(17, 11);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BIT_XOR", 5);
			LeaveRule("BIT_XOR", 5);
			LeaveRule_BIT_XOR();
		}
	}
	// $ANTLR end "BIT_XOR"

	partial void EnterRule_BOOL_AND();
	partial void LeaveRule_BOOL_AND();

	// $ANTLR start "BOOL_AND"
	[GrammarRule("BOOL_AND")]
	private void mBOOL_AND()
	{
		EnterRule_BOOL_AND();
		EnterRule("BOOL_AND", 6);
		TraceIn("BOOL_AND", 6);
		try
		{
			int _type = BOOL_AND;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:18:10: ( '&&' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:18:12: '&&'
			{
			DebugLocation(18, 12);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BOOL_AND", 6);
			LeaveRule("BOOL_AND", 6);
			LeaveRule_BOOL_AND();
		}
	}
	// $ANTLR end "BOOL_AND"

	partial void EnterRule_BOOL_OR();
	partial void LeaveRule_BOOL_OR();

	// $ANTLR start "BOOL_OR"
	[GrammarRule("BOOL_OR")]
	private void mBOOL_OR()
	{
		EnterRule_BOOL_OR();
		EnterRule("BOOL_OR", 7);
		TraceIn("BOOL_OR", 7);
		try
		{
			int _type = BOOL_OR;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:19:9: ( '||' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:19:11: '||'
			{
			DebugLocation(19, 11);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BOOL_OR", 7);
			LeaveRule("BOOL_OR", 7);
			LeaveRule_BOOL_OR();
		}
	}
	// $ANTLR end "BOOL_OR"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 8);
		TraceIn("DIV", 8);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:20:5: ( '/' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:20:7: '/'
			{
			DebugLocation(20, 7);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 8);
			LeaveRule("DIV", 8);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_EQUAL();
	partial void LeaveRule_EQUAL();

	// $ANTLR start "EQUAL"
	[GrammarRule("EQUAL")]
	private void mEQUAL()
	{
		EnterRule_EQUAL();
		EnterRule("EQUAL", 9);
		TraceIn("EQUAL", 9);
		try
		{
			int _type = EQUAL;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:21:7: ( '==' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:21:9: '=='
			{
			DebugLocation(21, 9);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUAL", 9);
			LeaveRule("EQUAL", 9);
			LeaveRule_EQUAL();
		}
	}
	// $ANTLR end "EQUAL"

	partial void EnterRule_GREATER();
	partial void LeaveRule_GREATER();

	// $ANTLR start "GREATER"
	[GrammarRule("GREATER")]
	private void mGREATER()
	{
		EnterRule_GREATER();
		EnterRule("GREATER", 10);
		TraceIn("GREATER", 10);
		try
		{
			int _type = GREATER;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:22:9: ( '>' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:22:11: '>'
			{
			DebugLocation(22, 11);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATER", 10);
			LeaveRule("GREATER", 10);
			LeaveRule_GREATER();
		}
	}
	// $ANTLR end "GREATER"

	partial void EnterRule_GREATER_OR_EQUAL();
	partial void LeaveRule_GREATER_OR_EQUAL();

	// $ANTLR start "GREATER_OR_EQUAL"
	[GrammarRule("GREATER_OR_EQUAL")]
	private void mGREATER_OR_EQUAL()
	{
		EnterRule_GREATER_OR_EQUAL();
		EnterRule("GREATER_OR_EQUAL", 11);
		TraceIn("GREATER_OR_EQUAL", 11);
		try
		{
			int _type = GREATER_OR_EQUAL;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:23:18: ( '>=' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:23:20: '>='
			{
			DebugLocation(23, 20);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATER_OR_EQUAL", 11);
			LeaveRule("GREATER_OR_EQUAL", 11);
			LeaveRule_GREATER_OR_EQUAL();
		}
	}
	// $ANTLR end "GREATER_OR_EQUAL"

	partial void EnterRule_LESS();
	partial void LeaveRule_LESS();

	// $ANTLR start "LESS"
	[GrammarRule("LESS")]
	private void mLESS()
	{
		EnterRule_LESS();
		EnterRule("LESS", 12);
		TraceIn("LESS", 12);
		try
		{
			int _type = LESS;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:24:6: ( '<' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:24:8: '<'
			{
			DebugLocation(24, 8);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS", 12);
			LeaveRule("LESS", 12);
			LeaveRule_LESS();
		}
	}
	// $ANTLR end "LESS"

	partial void EnterRule_LESS_OR_EQUAL();
	partial void LeaveRule_LESS_OR_EQUAL();

	// $ANTLR start "LESS_OR_EQUAL"
	[GrammarRule("LESS_OR_EQUAL")]
	private void mLESS_OR_EQUAL()
	{
		EnterRule_LESS_OR_EQUAL();
		EnterRule("LESS_OR_EQUAL", 13);
		TraceIn("LESS_OR_EQUAL", 13);
		try
		{
			int _type = LESS_OR_EQUAL;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:25:15: ( '<=' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:25:17: '<='
			{
			DebugLocation(25, 17);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS_OR_EQUAL", 13);
			LeaveRule("LESS_OR_EQUAL", 13);
			LeaveRule_LESS_OR_EQUAL();
		}
	}
	// $ANTLR end "LESS_OR_EQUAL"

	partial void EnterRule_MOD();
	partial void LeaveRule_MOD();

	// $ANTLR start "MOD"
	[GrammarRule("MOD")]
	private void mMOD()
	{
		EnterRule_MOD();
		EnterRule("MOD", 14);
		TraceIn("MOD", 14);
		try
		{
			int _type = MOD;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:26:5: ( '%' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:26:7: '%'
			{
			DebugLocation(26, 7);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOD", 14);
			LeaveRule("MOD", 14);
			LeaveRule_MOD();
		}
	}
	// $ANTLR end "MOD"

	partial void EnterRule_MUL();
	partial void LeaveRule_MUL();

	// $ANTLR start "MUL"
	[GrammarRule("MUL")]
	private void mMUL()
	{
		EnterRule_MUL();
		EnterRule("MUL", 15);
		TraceIn("MUL", 15);
		try
		{
			int _type = MUL;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:27:5: ( '*' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:27:7: '*'
			{
			DebugLocation(27, 7);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MUL", 15);
			LeaveRule("MUL", 15);
			LeaveRule_MUL();
		}
	}
	// $ANTLR end "MUL"

	partial void EnterRule_NOT_EQUAL();
	partial void LeaveRule_NOT_EQUAL();

	// $ANTLR start "NOT_EQUAL"
	[GrammarRule("NOT_EQUAL")]
	private void mNOT_EQUAL()
	{
		EnterRule_NOT_EQUAL();
		EnterRule("NOT_EQUAL", 16);
		TraceIn("NOT_EQUAL", 16);
		try
		{
			int _type = NOT_EQUAL;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:28:11: ( '!=' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:28:13: '!='
			{
			DebugLocation(28, 13);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT_EQUAL", 16);
			LeaveRule("NOT_EQUAL", 16);
			LeaveRule_NOT_EQUAL();
		}
	}
	// $ANTLR end "NOT_EQUAL"

	partial void EnterRule_SHIFT_LEFT();
	partial void LeaveRule_SHIFT_LEFT();

	// $ANTLR start "SHIFT_LEFT"
	[GrammarRule("SHIFT_LEFT")]
	private void mSHIFT_LEFT()
	{
		EnterRule_SHIFT_LEFT();
		EnterRule("SHIFT_LEFT", 17);
		TraceIn("SHIFT_LEFT", 17);
		try
		{
			int _type = SHIFT_LEFT;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:29:12: ( '<<' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:29:14: '<<'
			{
			DebugLocation(29, 14);
			Match("<<"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SHIFT_LEFT", 17);
			LeaveRule("SHIFT_LEFT", 17);
			LeaveRule_SHIFT_LEFT();
		}
	}
	// $ANTLR end "SHIFT_LEFT"

	partial void EnterRule_SHIFT_RIGHT();
	partial void LeaveRule_SHIFT_RIGHT();

	// $ANTLR start "SHIFT_RIGHT"
	[GrammarRule("SHIFT_RIGHT")]
	private void mSHIFT_RIGHT()
	{
		EnterRule_SHIFT_RIGHT();
		EnterRule("SHIFT_RIGHT", 18);
		TraceIn("SHIFT_RIGHT", 18);
		try
		{
			int _type = SHIFT_RIGHT;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:30:13: ( '>>' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:30:15: '>>'
			{
			DebugLocation(30, 15);
			Match(">>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SHIFT_RIGHT", 18);
			LeaveRule("SHIFT_RIGHT", 18);
			LeaveRule_SHIFT_RIGHT();
		}
	}
	// $ANTLR end "SHIFT_RIGHT"

	partial void EnterRule_SUB();
	partial void LeaveRule_SUB();

	// $ANTLR start "SUB"
	[GrammarRule("SUB")]
	private void mSUB()
	{
		EnterRule_SUB();
		EnterRule("SUB", 19);
		TraceIn("SUB", 19);
		try
		{
			int _type = SUB;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:31:5: ( '-' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:31:7: '-'
			{
			DebugLocation(31, 7);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SUB", 19);
			LeaveRule("SUB", 19);
			LeaveRule_SUB();
		}
	}
	// $ANTLR end "SUB"

	partial void EnterRule_T__61();
	partial void LeaveRule_T__61();

	// $ANTLR start "T__61"
	[GrammarRule("T__61")]
	private void mT__61()
	{
		EnterRule_T__61();
		EnterRule("T__61", 20);
		TraceIn("T__61", 20);
		try
		{
			int _type = T__61;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:32:7: ( '!' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:32:9: '!'
			{
			DebugLocation(32, 9);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__61", 20);
			LeaveRule("T__61", 20);
			LeaveRule_T__61();
		}
	}
	// $ANTLR end "T__61"

	partial void EnterRule_T__62();
	partial void LeaveRule_T__62();

	// $ANTLR start "T__62"
	[GrammarRule("T__62")]
	private void mT__62()
	{
		EnterRule_T__62();
		EnterRule("T__62", 21);
		TraceIn("T__62", 21);
		try
		{
			int _type = T__62;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:33:7: ( '(' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:33:9: '('
			{
			DebugLocation(33, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__62", 21);
			LeaveRule("T__62", 21);
			LeaveRule_T__62();
		}
	}
	// $ANTLR end "T__62"

	partial void EnterRule_T__63();
	partial void LeaveRule_T__63();

	// $ANTLR start "T__63"
	[GrammarRule("T__63")]
	private void mT__63()
	{
		EnterRule_T__63();
		EnterRule("T__63", 22);
		TraceIn("T__63", 22);
		try
		{
			int _type = T__63;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:34:7: ( ')' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:34:9: ')'
			{
			DebugLocation(34, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__63", 22);
			LeaveRule("T__63", 22);
			LeaveRule_T__63();
		}
	}
	// $ANTLR end "T__63"

	partial void EnterRule_T__64();
	partial void LeaveRule_T__64();

	// $ANTLR start "T__64"
	[GrammarRule("T__64")]
	private void mT__64()
	{
		EnterRule_T__64();
		EnterRule("T__64", 23);
		TraceIn("T__64", 23);
		try
		{
			int _type = T__64;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:35:7: ( '++' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:35:9: '++'
			{
			DebugLocation(35, 9);
			Match("++"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__64", 23);
			LeaveRule("T__64", 23);
			LeaveRule_T__64();
		}
	}
	// $ANTLR end "T__64"

	partial void EnterRule_T__65();
	partial void LeaveRule_T__65();

	// $ANTLR start "T__65"
	[GrammarRule("T__65")]
	private void mT__65()
	{
		EnterRule_T__65();
		EnterRule("T__65", 24);
		TraceIn("T__65", 24);
		try
		{
			int _type = T__65;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:36:7: ( ',' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:36:9: ','
			{
			DebugLocation(36, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__65", 24);
			LeaveRule("T__65", 24);
			LeaveRule_T__65();
		}
	}
	// $ANTLR end "T__65"

	partial void EnterRule_T__66();
	partial void LeaveRule_T__66();

	// $ANTLR start "T__66"
	[GrammarRule("T__66")]
	private void mT__66()
	{
		EnterRule_T__66();
		EnterRule("T__66", 25);
		TraceIn("T__66", 25);
		try
		{
			int _type = T__66;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:37:7: ( '--' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:37:9: '--'
			{
			DebugLocation(37, 9);
			Match("--"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__66", 25);
			LeaveRule("T__66", 25);
			LeaveRule_T__66();
		}
	}
	// $ANTLR end "T__66"

	partial void EnterRule_T__67();
	partial void LeaveRule_T__67();

	// $ANTLR start "T__67"
	[GrammarRule("T__67")]
	private void mT__67()
	{
		EnterRule_T__67();
		EnterRule("T__67", 26);
		TraceIn("T__67", 26);
		try
		{
			int _type = T__67;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:38:7: ( '->' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:38:9: '->'
			{
			DebugLocation(38, 9);
			Match("->"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__67", 26);
			LeaveRule("T__67", 26);
			LeaveRule_T__67();
		}
	}
	// $ANTLR end "T__67"

	partial void EnterRule_T__68();
	partial void LeaveRule_T__68();

	// $ANTLR start "T__68"
	[GrammarRule("T__68")]
	private void mT__68()
	{
		EnterRule_T__68();
		EnterRule("T__68", 27);
		TraceIn("T__68", 27);
		try
		{
			int _type = T__68;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:39:7: ( '.' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:39:9: '.'
			{
			DebugLocation(39, 9);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__68", 27);
			LeaveRule("T__68", 27);
			LeaveRule_T__68();
		}
	}
	// $ANTLR end "T__68"

	partial void EnterRule_T__69();
	partial void LeaveRule_T__69();

	// $ANTLR start "T__69"
	[GrammarRule("T__69")]
	private void mT__69()
	{
		EnterRule_T__69();
		EnterRule("T__69", 28);
		TraceIn("T__69", 28);
		try
		{
			int _type = T__69;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:40:7: ( ';' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:40:9: ';'
			{
			DebugLocation(40, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__69", 28);
			LeaveRule("T__69", 28);
			LeaveRule_T__69();
		}
	}
	// $ANTLR end "T__69"

	partial void EnterRule_T__70();
	partial void LeaveRule_T__70();

	// $ANTLR start "T__70"
	[GrammarRule("T__70")]
	private void mT__70()
	{
		EnterRule_T__70();
		EnterRule("T__70", 29);
		TraceIn("T__70", 29);
		try
		{
			int _type = T__70;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:41:7: ( '[' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:41:9: '['
			{
			DebugLocation(41, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__70", 29);
			LeaveRule("T__70", 29);
			LeaveRule_T__70();
		}
	}
	// $ANTLR end "T__70"

	partial void EnterRule_T__71();
	partial void LeaveRule_T__71();

	// $ANTLR start "T__71"
	[GrammarRule("T__71")]
	private void mT__71()
	{
		EnterRule_T__71();
		EnterRule("T__71", 30);
		TraceIn("T__71", 30);
		try
		{
			int _type = T__71;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:42:7: ( ']' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:42:9: ']'
			{
			DebugLocation(42, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__71", 30);
			LeaveRule("T__71", 30);
			LeaveRule_T__71();
		}
	}
	// $ANTLR end "T__71"

	partial void EnterRule_T__72();
	partial void LeaveRule_T__72();

	// $ANTLR start "T__72"
	[GrammarRule("T__72")]
	private void mT__72()
	{
		EnterRule_T__72();
		EnterRule("T__72", 31);
		TraceIn("T__72", 31);
		try
		{
			int _type = T__72;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:43:7: ( '{' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:43:9: '{'
			{
			DebugLocation(43, 9);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__72", 31);
			LeaveRule("T__72", 31);
			LeaveRule_T__72();
		}
	}
	// $ANTLR end "T__72"

	partial void EnterRule_T__73();
	partial void LeaveRule_T__73();

	// $ANTLR start "T__73"
	[GrammarRule("T__73")]
	private void mT__73()
	{
		EnterRule_T__73();
		EnterRule("T__73", 32);
		TraceIn("T__73", 32);
		try
		{
			int _type = T__73;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:44:7: ( '}' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:44:9: '}'
			{
			DebugLocation(44, 9);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__73", 32);
			LeaveRule("T__73", 32);
			LeaveRule_T__73();
		}
	}
	// $ANTLR end "T__73"

	partial void EnterRule_T__74();
	partial void LeaveRule_T__74();

	// $ANTLR start "T__74"
	[GrammarRule("T__74")]
	private void mT__74()
	{
		EnterRule_T__74();
		EnterRule("T__74", 33);
		TraceIn("T__74", 33);
		try
		{
			int _type = T__74;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:45:7: ( '~' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:45:9: '~'
			{
			DebugLocation(45, 9);
			Match('~'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__74", 33);
			LeaveRule("T__74", 33);
			LeaveRule_T__74();
		}
	}
	// $ANTLR end "T__74"

	partial void EnterRule_Whitespace();
	partial void LeaveRule_Whitespace();

	// $ANTLR start "Whitespace"
	[GrammarRule("Whitespace")]
	private void mWhitespace()
	{
		EnterRule_Whitespace();
		EnterRule("Whitespace", 34);
		TraceIn("Whitespace", 34);
		try
		{
			int _type = Whitespace;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:271:11: ( ( ' ' | '\\t' | '\\f' | '\\r' | '\\n' )+ )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:272:2: ( ' ' | '\\t' | '\\f' | '\\r' | '\\n' )+
			{
			DebugLocation(272, 2);
			// Grammar\\SimpleC.g:272:2: ( ' ' | '\\t' | '\\f' | '\\r' | '\\n' )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='\t' && LA1_0<='\n')||(LA1_0>='\f' && LA1_0<='\r')||LA1_0==' '))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammar\\SimpleC.g:
					{
					DebugLocation(272, 2);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(272, 39);

					_channel=Hidden;
				

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Whitespace", 34);
			LeaveRule("Whitespace", 34);
			LeaveRule_Whitespace();
		}
	}
	// $ANTLR end "Whitespace"

	partial void EnterRule_Integer();
	partial void LeaveRule_Integer();

	// $ANTLR start "Integer"
	[GrammarRule("Integer")]
	private void mInteger()
	{
		EnterRule_Integer();
		EnterRule("Integer", 35);
		TraceIn("Integer", 35);
		try
		{
			int _type = Integer;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:277:8: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:278:2: ( '0' .. '9' )+
			{
			DebugLocation(278, 2);
			// Grammar\\SimpleC.g:278:2: ( '0' .. '9' )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// Grammar\\SimpleC.g:
					{
					DebugLocation(278, 2);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Integer", 35);
			LeaveRule("Integer", 35);
			LeaveRule_Integer();
		}
	}
	// $ANTLR end "Integer"

	partial void EnterRule_SizeOf();
	partial void LeaveRule_SizeOf();

	// $ANTLR start "SizeOf"
	[GrammarRule("SizeOf")]
	private void mSizeOf()
	{
		EnterRule_SizeOf();
		EnterRule("SizeOf", 36);
		TraceIn("SizeOf", 36);
		try
		{
			int _type = SizeOf;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:281:7: ( 'sizeof' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:281:9: 'sizeof'
			{
			DebugLocation(281, 9);
			Match("sizeof"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SizeOf", 36);
			LeaveRule("SizeOf", 36);
			LeaveRule_SizeOf();
		}
	}
	// $ANTLR end "SizeOf"

	partial void EnterRule_Int();
	partial void LeaveRule_Int();

	// $ANTLR start "Int"
	[GrammarRule("Int")]
	private void mInt()
	{
		EnterRule_Int();
		EnterRule("Int", 37);
		TraceIn("Int", 37);
		try
		{
			int _type = Int;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:283:4: ( 'int' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:283:6: 'int'
			{
			DebugLocation(283, 6);
			Match("int"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Int", 37);
			LeaveRule("Int", 37);
			LeaveRule_Int();
		}
	}
	// $ANTLR end "Int"

	partial void EnterRule_Void();
	partial void LeaveRule_Void();

	// $ANTLR start "Void"
	[GrammarRule("Void")]
	private void mVoid()
	{
		EnterRule_Void();
		EnterRule("Void", 38);
		TraceIn("Void", 38);
		try
		{
			int _type = Void;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:285:5: ( 'void' )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:285:7: 'void'
			{
			DebugLocation(285, 7);
			Match("void"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Void", 38);
			LeaveRule("Void", 38);
			LeaveRule_Void();
		}
	}
	// $ANTLR end "Void"

	partial void EnterRule_Identifier();
	partial void LeaveRule_Identifier();

	// $ANTLR start "Identifier"
	[GrammarRule("Identifier")]
	private void mIdentifier()
	{
		EnterRule_Identifier();
		EnterRule("Identifier", 39);
		TraceIn("Identifier", 39);
		try
		{
			int _type = Identifier;
			int _channel = DefaultTokenChannel;
			// Grammar\\SimpleC.g:287:11: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:288:2: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
			{
			DebugLocation(288, 2);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(289, 2);
			// Grammar\\SimpleC.g:289:2: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='0' && LA3_0<='9')||(LA3_0>='A' && LA3_0<='Z')||LA3_0=='_'||(LA3_0>='a' && LA3_0<='z')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// Grammar\\SimpleC.g:
					{
					DebugLocation(289, 2);
					input.Consume();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Identifier", 39);
			LeaveRule("Identifier", 39);
			LeaveRule_Identifier();
		}
	}
	// $ANTLR end "Identifier"

	public override void mTokens()
	{
		// Grammar\\SimpleC.g:1:8: ( ADD | ASSIGN | BIT_AND | BIT_OR | BIT_XOR | BOOL_AND | BOOL_OR | DIV | EQUAL | GREATER | GREATER_OR_EQUAL | LESS | LESS_OR_EQUAL | MOD | MUL | NOT_EQUAL | SHIFT_LEFT | SHIFT_RIGHT | SUB | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | Whitespace | Integer | SizeOf | Int | Void | Identifier )
		int alt4=39;
		try { DebugEnterDecision(4, false);
		try
		{
			alt4 = dfa4.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(4); }
		switch (alt4)
		{
		case 1:
			DebugEnterAlt(1);
			// Grammar\\SimpleC.g:1:10: ADD
			{
			DebugLocation(1, 10);
			mADD(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// Grammar\\SimpleC.g:1:14: ASSIGN
			{
			DebugLocation(1, 14);
			mASSIGN(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// Grammar\\SimpleC.g:1:21: BIT_AND
			{
			DebugLocation(1, 21);
			mBIT_AND(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// Grammar\\SimpleC.g:1:29: BIT_OR
			{
			DebugLocation(1, 29);
			mBIT_OR(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// Grammar\\SimpleC.g:1:36: BIT_XOR
			{
			DebugLocation(1, 36);
			mBIT_XOR(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// Grammar\\SimpleC.g:1:44: BOOL_AND
			{
			DebugLocation(1, 44);
			mBOOL_AND(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// Grammar\\SimpleC.g:1:53: BOOL_OR
			{
			DebugLocation(1, 53);
			mBOOL_OR(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// Grammar\\SimpleC.g:1:61: DIV
			{
			DebugLocation(1, 61);
			mDIV(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// Grammar\\SimpleC.g:1:65: EQUAL
			{
			DebugLocation(1, 65);
			mEQUAL(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// Grammar\\SimpleC.g:1:71: GREATER
			{
			DebugLocation(1, 71);
			mGREATER(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// Grammar\\SimpleC.g:1:79: GREATER_OR_EQUAL
			{
			DebugLocation(1, 79);
			mGREATER_OR_EQUAL(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// Grammar\\SimpleC.g:1:96: LESS
			{
			DebugLocation(1, 96);
			mLESS(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// Grammar\\SimpleC.g:1:101: LESS_OR_EQUAL
			{
			DebugLocation(1, 101);
			mLESS_OR_EQUAL(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// Grammar\\SimpleC.g:1:115: MOD
			{
			DebugLocation(1, 115);
			mMOD(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// Grammar\\SimpleC.g:1:119: MUL
			{
			DebugLocation(1, 119);
			mMUL(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// Grammar\\SimpleC.g:1:123: NOT_EQUAL
			{
			DebugLocation(1, 123);
			mNOT_EQUAL(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// Grammar\\SimpleC.g:1:133: SHIFT_LEFT
			{
			DebugLocation(1, 133);
			mSHIFT_LEFT(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// Grammar\\SimpleC.g:1:144: SHIFT_RIGHT
			{
			DebugLocation(1, 144);
			mSHIFT_RIGHT(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// Grammar\\SimpleC.g:1:156: SUB
			{
			DebugLocation(1, 156);
			mSUB(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// Grammar\\SimpleC.g:1:160: T__61
			{
			DebugLocation(1, 160);
			mT__61(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// Grammar\\SimpleC.g:1:166: T__62
			{
			DebugLocation(1, 166);
			mT__62(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// Grammar\\SimpleC.g:1:172: T__63
			{
			DebugLocation(1, 172);
			mT__63(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// Grammar\\SimpleC.g:1:178: T__64
			{
			DebugLocation(1, 178);
			mT__64(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// Grammar\\SimpleC.g:1:184: T__65
			{
			DebugLocation(1, 184);
			mT__65(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// Grammar\\SimpleC.g:1:190: T__66
			{
			DebugLocation(1, 190);
			mT__66(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// Grammar\\SimpleC.g:1:196: T__67
			{
			DebugLocation(1, 196);
			mT__67(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// Grammar\\SimpleC.g:1:202: T__68
			{
			DebugLocation(1, 202);
			mT__68(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// Grammar\\SimpleC.g:1:208: T__69
			{
			DebugLocation(1, 208);
			mT__69(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// Grammar\\SimpleC.g:1:214: T__70
			{
			DebugLocation(1, 214);
			mT__70(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// Grammar\\SimpleC.g:1:220: T__71
			{
			DebugLocation(1, 220);
			mT__71(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// Grammar\\SimpleC.g:1:226: T__72
			{
			DebugLocation(1, 226);
			mT__72(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// Grammar\\SimpleC.g:1:232: T__73
			{
			DebugLocation(1, 232);
			mT__73(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// Grammar\\SimpleC.g:1:238: T__74
			{
			DebugLocation(1, 238);
			mT__74(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// Grammar\\SimpleC.g:1:244: Whitespace
			{
			DebugLocation(1, 244);
			mWhitespace(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// Grammar\\SimpleC.g:1:255: Integer
			{
			DebugLocation(1, 255);
			mInteger(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// Grammar\\SimpleC.g:1:263: SizeOf
			{
			DebugLocation(1, 263);
			mSizeOf(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// Grammar\\SimpleC.g:1:270: Int
			{
			DebugLocation(1, 270);
			mInt(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// Grammar\\SimpleC.g:1:274: Void
			{
			DebugLocation(1, 274);
			mVoid(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// Grammar\\SimpleC.g:1:279: Identifier
			{
			DebugLocation(1, 279);
			mIdentifier(); 

			}
			break;

		}

	}


	#region DFA
	DFA4 dfa4;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4(this);
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x1\xFFFF\x1\x1E\x1\x20\x1\x22\x1\x24\x2\xFFFF\x1\x27\x1\x2A\x2\xFFFF"+
			"\x1\x2C\x1\x2F\xC\xFFFF\x3\x1C\x14\xFFFF\x4\x1C\x1\x37\x2\x1C\x1\xFFFF"+
			"\x1\x3A\x1\x1C\x1\xFFFF\x1\x3C\x1\xFFFF";
		private const string DFA4_eofS =
			"\x3D\xFFFF";
		private const string DFA4_minS =
			"\x1\x9\x1\x2B\x1\x3D\x1\x26\x1\x7C\x2\xFFFF\x1\x3D\x1\x3C\x2\xFFFF\x1"+
			"\x3D\x1\x2D\xC\xFFFF\x1\x69\x1\x6E\x1\x6F\x14\xFFFF\x1\x7A\x1\x74\x1"+
			"\x69\x1\x65\x1\x30\x1\x64\x1\x6F\x1\xFFFF\x1\x30\x1\x66\x1\xFFFF\x1\x30"+
			"\x1\xFFFF";
		private const string DFA4_maxS =
			"\x1\x7E\x1\x2B\x1\x3D\x1\x26\x1\x7C\x2\xFFFF\x1\x3E\x1\x3D\x2\xFFFF\x1"+
			"\x3D\x1\x3E\xC\xFFFF\x1\x69\x1\x6E\x1\x6F\x14\xFFFF\x1\x7A\x1\x74\x1"+
			"\x69\x1\x65\x1\x7A\x1\x64\x1\x6F\x1\xFFFF\x1\x7A\x1\x66\x1\xFFFF\x1\x7A"+
			"\x1\xFFFF";
		private const string DFA4_acceptS =
			"\x5\xFFFF\x1\x5\x1\x8\x2\xFFFF\x1\xE\x1\xF\x2\xFFFF\x1\x15\x1\x16\x1"+
			"\x18\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x3"+
			"\xFFFF\x1\x27\x1\x17\x1\x1\x1\x9\x1\x2\x1\x6\x1\x3\x1\x7\x1\x4\x1\xB"+
			"\x1\x12\x1\xA\x1\xD\x1\x11\x1\xC\x1\x10\x1\x14\x1\x19\x1\x1A\x1\x13\x7"+
			"\xFFFF\x1\x25\x2\xFFFF\x1\x26\x1\xFFFF\x1\x24";
		private const string DFA4_specialS =
			"\x3D\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x2\x17\x1\xFFFF\x2\x17\x12\xFFFF\x1\x17\x1\xB\x3\xFFFF\x1\x9\x1\x3"+
				"\x1\xFFFF\x1\xD\x1\xE\x1\xA\x1\x1\x1\xF\x1\xC\x1\x10\x1\x6\xA\x18\x1"+
				"\xFFFF\x1\x11\x1\x8\x1\x2\x1\x7\x2\xFFFF\x1A\x1C\x1\x12\x1\xFFFF\x1"+
				"\x13\x1\x5\x1\x1C\x1\xFFFF\x8\x1C\x1\x1A\x9\x1C\x1\x19\x2\x1C\x1\x1B"+
				"\x4\x1C\x1\x14\x1\x4\x1\x15\x1\x16",
				"\x1\x1D",
				"\x1\x1F",
				"\x1\x21",
				"\x1\x23",
				"",
				"",
				"\x1\x25\x1\x26",
				"\x1\x29\x1\x28",
				"",
				"",
				"\x1\x2B",
				"\x1\x2D\x10\xFFFF\x1\x2E",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x30",
				"\x1\x31",
				"\x1\x32",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x33",
				"\x1\x34",
				"\x1\x35",
				"\x1\x36",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x38",
				"\x1\x39",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x3B",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				""
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( ADD | ASSIGN | BIT_AND | BIT_OR | BIT_XOR | BOOL_AND | BOOL_OR | DIV | EQUAL | GREATER | GREATER_OR_EQUAL | LESS | LESS_OR_EQUAL | MOD | MUL | NOT_EQUAL | SHIFT_LEFT | SHIFT_RIGHT | SUB | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | Whitespace | Integer | SizeOf | Int | Void | Identifier );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  SimpleC.Grammar 
