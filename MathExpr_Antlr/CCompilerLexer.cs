//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 CCompiler.g 2015-10-06 15:48:23

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class CCompilerLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int ADD=4;
	public const int AND=5;
	public const int ARGS=6;
	public const int ARGS_DECL=7;
	public const int ASSIGN=8;
	public const int BIT_AND=9;
	public const int BIT_OR=10;
	public const int BLOCK=11;
	public const int CALL=12;
	public const int COMMA=13;
	public const int CONVERT=14;
	public const int DEFINE=15;
	public const int DIGIT=16;
	public const int DIV=17;
	public const int DO=18;
	public const int ELSE=19;
	public const int EQ=20;
	public const int EscapeSequence=21;
	public const int FALSE=22;
	public const int FOR=23;
	public const int FUNCTION=24;
	public const int FUNC_DECL=25;
	public const int GE=26;
	public const int GT=27;
	public const int IDENT=28;
	public const int IF=29;
	public const int INCLUDE=30;
	public const int INCLUDE_STRING=31;
	public const int INDEX=32;
	public const int LE=33;
	public const int LETTER=34;
	public const int LINE_COMMENT=35;
	public const int LT=36;
	public const int ML_COMMENT=37;
	public const int MUL=38;
	public const int NE=39;
	public const int NOT=40;
	public const int NUMBER=41;
	public const int OR=42;
	public const int OctalEscape=43;
	public const int PROGRAM=44;
	public const int RETURN=45;
	public const int SEMI=46;
	public const int STRING=47;
	public const int SUB=48;
	public const int TRUE=49;
	public const int TYPE=50;
	public const int UNKNOWN=51;
	public const int VAR=52;
	public const int WHILE=53;
	public const int WS=54;

    // delegates
    // delegators

	public CCompilerLexer()
	{
		OnCreated();
	}

	public CCompilerLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public CCompilerLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "CCompiler.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 1);
		TraceIn("AND", 1);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:7:5: ( '&&' )
			DebugEnterAlt(1);
			// CCompiler.g:7:7: '&&'
			{
			DebugLocation(7, 7);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 1);
			LeaveRule("AND", 1);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_DO();
	partial void LeaveRule_DO();

	// $ANTLR start "DO"
	[GrammarRule("DO")]
	private void mDO()
	{
		EnterRule_DO();
		EnterRule("DO", 2);
		TraceIn("DO", 2);
		try
		{
			int _type = DO;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:8:4: ( 'do' )
			DebugEnterAlt(1);
			// CCompiler.g:8:6: 'do'
			{
			DebugLocation(8, 6);
			Match("do"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DO", 2);
			LeaveRule("DO", 2);
			LeaveRule_DO();
		}
	}
	// $ANTLR end "DO"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 3);
		TraceIn("ELSE", 3);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:9:6: ( 'else' )
			DebugEnterAlt(1);
			// CCompiler.g:9:8: 'else'
			{
			DebugLocation(9, 8);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 3);
			LeaveRule("ELSE", 3);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_FALSE();
	partial void LeaveRule_FALSE();

	// $ANTLR start "FALSE"
	[GrammarRule("FALSE")]
	private void mFALSE()
	{
		EnterRule_FALSE();
		EnterRule("FALSE", 4);
		TraceIn("FALSE", 4);
		try
		{
			int _type = FALSE;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:10:7: ( 'false' )
			DebugEnterAlt(1);
			// CCompiler.g:10:9: 'false'
			{
			DebugLocation(10, 9);
			Match("false"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FALSE", 4);
			LeaveRule("FALSE", 4);
			LeaveRule_FALSE();
		}
	}
	// $ANTLR end "FALSE"

	partial void EnterRule_FOR();
	partial void LeaveRule_FOR();

	// $ANTLR start "FOR"
	[GrammarRule("FOR")]
	private void mFOR()
	{
		EnterRule_FOR();
		EnterRule("FOR", 5);
		TraceIn("FOR", 5);
		try
		{
			int _type = FOR;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:11:5: ( 'for' )
			DebugEnterAlt(1);
			// CCompiler.g:11:7: 'for'
			{
			DebugLocation(11, 7);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FOR", 5);
			LeaveRule("FOR", 5);
			LeaveRule_FOR();
		}
	}
	// $ANTLR end "FOR"

	partial void EnterRule_FUNCTION();
	partial void LeaveRule_FUNCTION();

	// $ANTLR start "FUNCTION"
	[GrammarRule("FUNCTION")]
	private void mFUNCTION()
	{
		EnterRule_FUNCTION();
		EnterRule("FUNCTION", 6);
		TraceIn("FUNCTION", 6);
		try
		{
			int _type = FUNCTION;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:12:10: ( 'function' )
			DebugEnterAlt(1);
			// CCompiler.g:12:12: 'function'
			{
			DebugLocation(12, 12);
			Match("function"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUNCTION", 6);
			LeaveRule("FUNCTION", 6);
			LeaveRule_FUNCTION();
		}
	}
	// $ANTLR end "FUNCTION"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 7);
		TraceIn("IF", 7);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:13:4: ( 'if' )
			DebugEnterAlt(1);
			// CCompiler.g:13:6: 'if'
			{
			DebugLocation(13, 6);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 7);
			LeaveRule("IF", 7);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 8);
		TraceIn("OR", 8);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:14:4: ( '||' )
			DebugEnterAlt(1);
			// CCompiler.g:14:6: '||'
			{
			DebugLocation(14, 6);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 8);
			LeaveRule("OR", 8);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_RETURN();
	partial void LeaveRule_RETURN();

	// $ANTLR start "RETURN"
	[GrammarRule("RETURN")]
	private void mRETURN()
	{
		EnterRule_RETURN();
		EnterRule("RETURN", 9);
		TraceIn("RETURN", 9);
		try
		{
			int _type = RETURN;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:15:8: ( 'return' )
			DebugEnterAlt(1);
			// CCompiler.g:15:10: 'return'
			{
			DebugLocation(15, 10);
			Match("return"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RETURN", 9);
			LeaveRule("RETURN", 9);
			LeaveRule_RETURN();
		}
	}
	// $ANTLR end "RETURN"

	partial void EnterRule_TRUE();
	partial void LeaveRule_TRUE();

	// $ANTLR start "TRUE"
	[GrammarRule("TRUE")]
	private void mTRUE()
	{
		EnterRule_TRUE();
		EnterRule("TRUE", 10);
		TraceIn("TRUE", 10);
		try
		{
			int _type = TRUE;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:16:6: ( 'true' )
			DebugEnterAlt(1);
			// CCompiler.g:16:8: 'true'
			{
			DebugLocation(16, 8);
			Match("true"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRUE", 10);
			LeaveRule("TRUE", 10);
			LeaveRule_TRUE();
		}
	}
	// $ANTLR end "TRUE"

	partial void EnterRule_VAR();
	partial void LeaveRule_VAR();

	// $ANTLR start "VAR"
	[GrammarRule("VAR")]
	private void mVAR()
	{
		EnterRule_VAR();
		EnterRule("VAR", 11);
		TraceIn("VAR", 11);
		try
		{
			int _type = VAR;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:17:5: ( 'var' )
			DebugEnterAlt(1);
			// CCompiler.g:17:7: 'var'
			{
			DebugLocation(17, 7);
			Match("var"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VAR", 11);
			LeaveRule("VAR", 11);
			LeaveRule_VAR();
		}
	}
	// $ANTLR end "VAR"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 12);
		TraceIn("WHILE", 12);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:18:7: ( 'while' )
			DebugEnterAlt(1);
			// CCompiler.g:18:9: 'while'
			{
			DebugLocation(18, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 12);
			LeaveRule("WHILE", 12);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_T__55();
	partial void LeaveRule_T__55();

	// $ANTLR start "T__55"
	[GrammarRule("T__55")]
	private void mT__55()
	{
		EnterRule_T__55();
		EnterRule("T__55", 13);
		TraceIn("T__55", 13);
		try
		{
			int _type = T__55;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:19:7: ( '#include' )
			DebugEnterAlt(1);
			// CCompiler.g:19:9: '#include'
			{
			DebugLocation(19, 9);
			Match("#include"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__55", 13);
			LeaveRule("T__55", 13);
			LeaveRule_T__55();
		}
	}
	// $ANTLR end "T__55"

	partial void EnterRule_T__56();
	partial void LeaveRule_T__56();

	// $ANTLR start "T__56"
	[GrammarRule("T__56")]
	private void mT__56()
	{
		EnterRule_T__56();
		EnterRule("T__56", 14);
		TraceIn("T__56", 14);
		try
		{
			int _type = T__56;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:20:7: ( '(' )
			DebugEnterAlt(1);
			// CCompiler.g:20:9: '('
			{
			DebugLocation(20, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__56", 14);
			LeaveRule("T__56", 14);
			LeaveRule_T__56();
		}
	}
	// $ANTLR end "T__56"

	partial void EnterRule_T__57();
	partial void LeaveRule_T__57();

	// $ANTLR start "T__57"
	[GrammarRule("T__57")]
	private void mT__57()
	{
		EnterRule_T__57();
		EnterRule("T__57", 15);
		TraceIn("T__57", 15);
		try
		{
			int _type = T__57;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:21:7: ( ')' )
			DebugEnterAlt(1);
			// CCompiler.g:21:9: ')'
			{
			DebugLocation(21, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__57", 15);
			LeaveRule("T__57", 15);
			LeaveRule_T__57();
		}
	}
	// $ANTLR end "T__57"

	partial void EnterRule_T__58();
	partial void LeaveRule_T__58();

	// $ANTLR start "T__58"
	[GrammarRule("T__58")]
	private void mT__58()
	{
		EnterRule_T__58();
		EnterRule("T__58", 16);
		TraceIn("T__58", 16);
		try
		{
			int _type = T__58;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:22:7: ( '[' )
			DebugEnterAlt(1);
			// CCompiler.g:22:9: '['
			{
			DebugLocation(22, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__58", 16);
			LeaveRule("T__58", 16);
			LeaveRule_T__58();
		}
	}
	// $ANTLR end "T__58"

	partial void EnterRule_T__59();
	partial void LeaveRule_T__59();

	// $ANTLR start "T__59"
	[GrammarRule("T__59")]
	private void mT__59()
	{
		EnterRule_T__59();
		EnterRule("T__59", 17);
		TraceIn("T__59", 17);
		try
		{
			int _type = T__59;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:23:7: ( ']' )
			DebugEnterAlt(1);
			// CCompiler.g:23:9: ']'
			{
			DebugLocation(23, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__59", 17);
			LeaveRule("T__59", 17);
			LeaveRule_T__59();
		}
	}
	// $ANTLR end "T__59"

	partial void EnterRule_T__60();
	partial void LeaveRule_T__60();

	// $ANTLR start "T__60"
	[GrammarRule("T__60")]
	private void mT__60()
	{
		EnterRule_T__60();
		EnterRule("T__60", 18);
		TraceIn("T__60", 18);
		try
		{
			int _type = T__60;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:24:7: ( '{' )
			DebugEnterAlt(1);
			// CCompiler.g:24:9: '{'
			{
			DebugLocation(24, 9);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__60", 18);
			LeaveRule("T__60", 18);
			LeaveRule_T__60();
		}
	}
	// $ANTLR end "T__60"

	partial void EnterRule_T__61();
	partial void LeaveRule_T__61();

	// $ANTLR start "T__61"
	[GrammarRule("T__61")]
	private void mT__61()
	{
		EnterRule_T__61();
		EnterRule("T__61", 19);
		TraceIn("T__61", 19);
		try
		{
			int _type = T__61;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:25:7: ( '}' )
			DebugEnterAlt(1);
			// CCompiler.g:25:9: '}'
			{
			DebugLocation(25, 9);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__61", 19);
			LeaveRule("T__61", 19);
			LeaveRule_T__61();
		}
	}
	// $ANTLR end "T__61"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 20);
		TraceIn("NOT", 20);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:39:4: ( '!' )
			DebugEnterAlt(1);
			// CCompiler.g:39:7: '!'
			{
			DebugLocation(39, 7);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 20);
			LeaveRule("NOT", 20);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_ADD();
	partial void LeaveRule_ADD();

	// $ANTLR start "ADD"
	[GrammarRule("ADD")]
	private void mADD()
	{
		EnterRule_ADD();
		EnterRule("ADD", 21);
		TraceIn("ADD", 21);
		try
		{
			int _type = ADD;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:40:4: ( '+' )
			DebugEnterAlt(1);
			// CCompiler.g:40:10: '+'
			{
			DebugLocation(40, 10);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ADD", 21);
			LeaveRule("ADD", 21);
			LeaveRule_ADD();
		}
	}
	// $ANTLR end "ADD"

	partial void EnterRule_SUB();
	partial void LeaveRule_SUB();

	// $ANTLR start "SUB"
	[GrammarRule("SUB")]
	private void mSUB()
	{
		EnterRule_SUB();
		EnterRule("SUB", 22);
		TraceIn("SUB", 22);
		try
		{
			int _type = SUB;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:41:4: ( '-' )
			DebugEnterAlt(1);
			// CCompiler.g:41:10: '-'
			{
			DebugLocation(41, 10);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SUB", 22);
			LeaveRule("SUB", 22);
			LeaveRule_SUB();
		}
	}
	// $ANTLR end "SUB"

	partial void EnterRule_MUL();
	partial void LeaveRule_MUL();

	// $ANTLR start "MUL"
	[GrammarRule("MUL")]
	private void mMUL()
	{
		EnterRule_MUL();
		EnterRule("MUL", 23);
		TraceIn("MUL", 23);
		try
		{
			int _type = MUL;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:42:4: ( '*' )
			DebugEnterAlt(1);
			// CCompiler.g:42:10: '*'
			{
			DebugLocation(42, 10);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MUL", 23);
			LeaveRule("MUL", 23);
			LeaveRule_MUL();
		}
	}
	// $ANTLR end "MUL"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 24);
		TraceIn("DIV", 24);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:43:4: ( '/' )
			DebugEnterAlt(1);
			// CCompiler.g:43:10: '/'
			{
			DebugLocation(43, 10);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 24);
			LeaveRule("DIV", 24);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_BIT_AND();
	partial void LeaveRule_BIT_AND();

	// $ANTLR start "BIT_AND"
	[GrammarRule("BIT_AND")]
	private void mBIT_AND()
	{
		EnterRule_BIT_AND();
		EnterRule("BIT_AND", 25);
		TraceIn("BIT_AND", 25);
		try
		{
			int _type = BIT_AND;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:44:8: ( '&' )
			DebugEnterAlt(1);
			// CCompiler.g:44:10: '&'
			{
			DebugLocation(44, 10);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BIT_AND", 25);
			LeaveRule("BIT_AND", 25);
			LeaveRule_BIT_AND();
		}
	}
	// $ANTLR end "BIT_AND"

	partial void EnterRule_BIT_OR();
	partial void LeaveRule_BIT_OR();

	// $ANTLR start "BIT_OR"
	[GrammarRule("BIT_OR")]
	private void mBIT_OR()
	{
		EnterRule_BIT_OR();
		EnterRule("BIT_OR", 26);
		TraceIn("BIT_OR", 26);
		try
		{
			int _type = BIT_OR;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:45:7: ( '|' )
			DebugEnterAlt(1);
			// CCompiler.g:45:10: '|'
			{
			DebugLocation(45, 10);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BIT_OR", 26);
			LeaveRule("BIT_OR", 26);
			LeaveRule_BIT_OR();
		}
	}
	// $ANTLR end "BIT_OR"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 27);
		TraceIn("ASSIGN", 27);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:46:8: ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' )
			int alt1=11;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case '=':
				{
				alt1 = 1;
				}
				break;
			case '*':
				{
				alt1 = 2;
				}
				break;
			case '/':
				{
				alt1 = 3;
				}
				break;
			case '%':
				{
				alt1 = 4;
				}
				break;
			case '+':
				{
				alt1 = 5;
				}
				break;
			case '-':
				{
				alt1 = 6;
				}
				break;
			case '<':
				{
				alt1 = 7;
				}
				break;
			case '>':
				{
				alt1 = 8;
				}
				break;
			case '&':
				{
				alt1 = 9;
				}
				break;
			case '^':
				{
				alt1 = 10;
				}
				break;
			case '|':
				{
				alt1 = 11;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// CCompiler.g:46:10: '='
				{
				DebugLocation(46, 10);
				Match('='); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CCompiler.g:47:4: '*='
				{
				DebugLocation(47, 4);
				Match("*="); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// CCompiler.g:48:4: '/='
				{
				DebugLocation(48, 4);
				Match("/="); 


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// CCompiler.g:49:4: '%='
				{
				DebugLocation(49, 4);
				Match("%="); 


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// CCompiler.g:50:4: '+='
				{
				DebugLocation(50, 4);
				Match("+="); 


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// CCompiler.g:51:4: '-='
				{
				DebugLocation(51, 4);
				Match("-="); 


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// CCompiler.g:52:4: '<<='
				{
				DebugLocation(52, 4);
				Match("<<="); 


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// CCompiler.g:53:4: '>>='
				{
				DebugLocation(53, 4);
				Match(">>="); 


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// CCompiler.g:54:4: '&='
				{
				DebugLocation(54, 4);
				Match("&="); 


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// CCompiler.g:55:4: '^='
				{
				DebugLocation(55, 4);
				Match("^="); 


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// CCompiler.g:56:4: '|='
				{
				DebugLocation(56, 4);
				Match("|="); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 27);
			LeaveRule("ASSIGN", 27);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_GE();
	partial void LeaveRule_GE();

	// $ANTLR start "GE"
	[GrammarRule("GE")]
	private void mGE()
	{
		EnterRule_GE();
		EnterRule("GE", 28);
		TraceIn("GE", 28);
		try
		{
			int _type = GE;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:58:3: ( '>=' )
			DebugEnterAlt(1);
			// CCompiler.g:58:11: '>='
			{
			DebugLocation(58, 11);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GE", 28);
			LeaveRule("GE", 28);
			LeaveRule_GE();
		}
	}
	// $ANTLR end "GE"

	partial void EnterRule_LE();
	partial void LeaveRule_LE();

	// $ANTLR start "LE"
	[GrammarRule("LE")]
	private void mLE()
	{
		EnterRule_LE();
		EnterRule("LE", 29);
		TraceIn("LE", 29);
		try
		{
			int _type = LE;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:59:3: ( '<=' )
			DebugEnterAlt(1);
			// CCompiler.g:59:11: '<='
			{
			DebugLocation(59, 11);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LE", 29);
			LeaveRule("LE", 29);
			LeaveRule_LE();
		}
	}
	// $ANTLR end "LE"

	partial void EnterRule_NE();
	partial void LeaveRule_NE();

	// $ANTLR start "NE"
	[GrammarRule("NE")]
	private void mNE()
	{
		EnterRule_NE();
		EnterRule("NE", 30);
		TraceIn("NE", 30);
		try
		{
			int _type = NE;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:60:3: ( '!=' )
			DebugEnterAlt(1);
			// CCompiler.g:60:6: '!='
			{
			DebugLocation(60, 6);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NE", 30);
			LeaveRule("NE", 30);
			LeaveRule_NE();
		}
	}
	// $ANTLR end "NE"

	partial void EnterRule_EQ();
	partial void LeaveRule_EQ();

	// $ANTLR start "EQ"
	[GrammarRule("EQ")]
	private void mEQ()
	{
		EnterRule_EQ();
		EnterRule("EQ", 31);
		TraceIn("EQ", 31);
		try
		{
			int _type = EQ;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:61:3: ( '==' )
			DebugEnterAlt(1);
			// CCompiler.g:61:7: '=='
			{
			DebugLocation(61, 7);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQ", 31);
			LeaveRule("EQ", 31);
			LeaveRule_EQ();
		}
	}
	// $ANTLR end "EQ"

	partial void EnterRule_GT();
	partial void LeaveRule_GT();

	// $ANTLR start "GT"
	[GrammarRule("GT")]
	private void mGT()
	{
		EnterRule_GT();
		EnterRule("GT", 32);
		TraceIn("GT", 32);
		try
		{
			int _type = GT;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:62:3: ( '>' )
			DebugEnterAlt(1);
			// CCompiler.g:62:11: '>'
			{
			DebugLocation(62, 11);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GT", 32);
			LeaveRule("GT", 32);
			LeaveRule_GT();
		}
	}
	// $ANTLR end "GT"

	partial void EnterRule_LT();
	partial void LeaveRule_LT();

	// $ANTLR start "LT"
	[GrammarRule("LT")]
	private void mLT()
	{
		EnterRule_LT();
		EnterRule("LT", 33);
		TraceIn("LT", 33);
		try
		{
			int _type = LT;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:63:3: ( '<' )
			DebugEnterAlt(1);
			// CCompiler.g:63:11: '<'
			{
			DebugLocation(63, 11);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LT", 33);
			LeaveRule("LT", 33);
			LeaveRule_LT();
		}
	}
	// $ANTLR end "LT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 34);
		TraceIn("WS", 34);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:66:5: ( ( ' ' | '\\r' | '\\t' | 'f' | '\\n' ) )
			DebugEnterAlt(1);
			// CCompiler.g:66:8: ( ' ' | '\\r' | '\\t' | 'f' | '\\n' )
			{
			DebugLocation(66, 8);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' '||input.LA(1)=='f')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(66, 39);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 34);
			LeaveRule("WS", 34);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_ML_COMMENT();
	partial void LeaveRule_ML_COMMENT();

	// $ANTLR start "ML_COMMENT"
	[GrammarRule("ML_COMMENT")]
	private void mML_COMMENT()
	{
		EnterRule_ML_COMMENT();
		EnterRule("ML_COMMENT", 35);
		TraceIn("ML_COMMENT", 35);
		try
		{
			int _type = ML_COMMENT;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:70:11: ( '/*' ( options {greedy=false; } : . )* '*/' )
			DebugEnterAlt(1);
			// CCompiler.g:71:3: '/*' ( options {greedy=false; } : . )* '*/'
			{
			DebugLocation(71, 3);
			Match("/*"); 

			DebugLocation(71, 8);
			// CCompiler.g:71:8: ( options {greedy=false; } : . )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0=='*'))
				{
					int LA2_1 = input.LA(2);

					if ((LA2_1=='/'))
					{
						alt2 = 2;
					}
					else if (((LA2_1>='\u0000' && LA2_1<='.')||(LA2_1>='0' && LA2_1<='\uFFFF')))
					{
						alt2 = 1;
					}


				}
				else if (((LA2_0>='\u0000' && LA2_0<=')')||(LA2_0>='+' && LA2_0<='\uFFFF')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// CCompiler.g:71:38: .
					{
					DebugLocation(71, 38);
					MatchAny(); 

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(71, 43);
			Match("*/"); 

			DebugLocation(71, 48);

			    _channel=Hidden;
			  

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ML_COMMENT", 35);
			LeaveRule("ML_COMMENT", 35);
			LeaveRule_ML_COMMENT();
		}
	}
	// $ANTLR end "ML_COMMENT"

	partial void EnterRule_LINE_COMMENT();
	partial void LeaveRule_LINE_COMMENT();

	// $ANTLR start "LINE_COMMENT"
	[GrammarRule("LINE_COMMENT")]
	private void mLINE_COMMENT()
	{
		EnterRule_LINE_COMMENT();
		EnterRule("LINE_COMMENT", 36);
		TraceIn("LINE_COMMENT", 36);
		try
		{
			int _type = LINE_COMMENT;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:77:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// CCompiler.g:77:7: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
			{
			DebugLocation(77, 7);
			Match("//"); 

			DebugLocation(77, 12);
			// CCompiler.g:77:12: (~ ( '\\n' | '\\r' ) )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='\u0000' && LA3_0<='\t')||(LA3_0>='\u000B' && LA3_0<='\f')||(LA3_0>='\u000E' && LA3_0<='\uFFFF')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// CCompiler.g:
					{
					DebugLocation(77, 12);
					input.Consume();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(77, 26);
			// CCompiler.g:77:26: ( '\\r' )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0=='\r'))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// CCompiler.g:77:26: '\\r'
				{
				DebugLocation(77, 26);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(77, 32);
			Match('\n'); 
			DebugLocation(77, 37);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINE_COMMENT", 36);
			LeaveRule("LINE_COMMENT", 36);
			LeaveRule_LINE_COMMENT();
		}
	}
	// $ANTLR end "LINE_COMMENT"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 37);
		TraceIn("DIGIT", 37);
		try
		{
			// CCompiler.g:80:15: ( '0' .. '9' )
			DebugEnterAlt(1);
			// CCompiler.g:
			{
			DebugLocation(80, 15);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 37);
			LeaveRule("DIGIT", 37);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 38);
		TraceIn("LETTER", 38);
		try
		{
			// CCompiler.g:84:16: ( 'a' .. 'z' | 'A' .. 'Z' | '_' )
			DebugEnterAlt(1);
			// CCompiler.g:
			{
			DebugLocation(84, 16);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 38);
			LeaveRule("LETTER", 38);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_NUMBER();
	partial void LeaveRule_NUMBER();

	// $ANTLR start "NUMBER"
	[GrammarRule("NUMBER")]
	private void mNUMBER()
	{
		EnterRule_NUMBER();
		EnterRule("NUMBER", 39);
		TraceIn("NUMBER", 39);
		try
		{
			int _type = NUMBER;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:88:7: ( ( DIGIT )+ ( '.' ( DIGIT )+ )? )
			DebugEnterAlt(1);
			// CCompiler.g:89:3: ( DIGIT )+ ( '.' ( DIGIT )+ )?
			{
			DebugLocation(89, 3);
			// CCompiler.g:89:3: ( DIGIT )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if (((LA5_0>='0' && LA5_0<='9')))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// CCompiler.g:
					{
					DebugLocation(89, 3);
					input.Consume();


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(89, 10);
			// CCompiler.g:89:10: ( '.' ( DIGIT )+ )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0=='.'))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// CCompiler.g:89:11: '.' ( DIGIT )+
				{
				DebugLocation(89, 11);
				Match('.'); 
				DebugLocation(89, 15);
				// CCompiler.g:89:15: ( DIGIT )+
				int cnt6=0;
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if (((LA6_0>='0' && LA6_0<='9')))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// CCompiler.g:
						{
						DebugLocation(89, 15);
						input.Consume();


						}
						break;

					default:
						if (cnt6 >= 1)
							goto loop6;

						EarlyExitException eee6 = new EarlyExitException( 6, input );
						DebugRecognitionException(eee6);
						throw eee6;
					}
					cnt6++;
				}
				loop6:
					;

				} finally { DebugExitSubRule(6); }


				}
				break;

			}
			} finally { DebugExitSubRule(7); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUMBER", 39);
			LeaveRule("NUMBER", 39);
			LeaveRule_NUMBER();
		}
	}
	// $ANTLR end "NUMBER"

	partial void EnterRule_EscapeSequence();
	partial void LeaveRule_EscapeSequence();

	// $ANTLR start "EscapeSequence"
	[GrammarRule("EscapeSequence")]
	private void mEscapeSequence()
	{
		EnterRule_EscapeSequence();
		EnterRule("EscapeSequence", 40);
		TraceIn("EscapeSequence", 40);
		try
		{
			// CCompiler.g:95:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | OctalEscape )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0=='\\'))
			{
				int LA8_1 = input.LA(2);

				if ((LA8_1=='\"'||LA8_1=='\''||LA8_1=='\\'||LA8_1=='b'||LA8_1=='f'||LA8_1=='n'||LA8_1=='r'||LA8_1=='t'))
				{
					alt8 = 1;
				}
				else if (((LA8_1>='0' && LA8_1<='7')))
				{
					alt8 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// CCompiler.g:95:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(95, 9);
				Match('\\'); 
				DebugLocation(95, 14);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CCompiler.g:96:9: OctalEscape
				{
				DebugLocation(96, 9);
				mOctalEscape(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("EscapeSequence", 40);
			LeaveRule("EscapeSequence", 40);
			LeaveRule_EscapeSequence();
		}
	}
	// $ANTLR end "EscapeSequence"

	partial void EnterRule_OctalEscape();
	partial void LeaveRule_OctalEscape();

	// $ANTLR start "OctalEscape"
	[GrammarRule("OctalEscape")]
	private void mOctalEscape()
	{
		EnterRule_OctalEscape();
		EnterRule("OctalEscape", 41);
		TraceIn("OctalEscape", 41);
		try
		{
			// CCompiler.g:101:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
			int alt9=3;
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0=='\\'))
			{
				int LA9_1 = input.LA(2);

				if (((LA9_1>='0' && LA9_1<='3')))
				{
					int LA9_2 = input.LA(3);

					if (((LA9_2>='0' && LA9_2<='7')))
					{
						int LA9_4 = input.LA(4);

						if (((LA9_4>='0' && LA9_4<='7')))
						{
							alt9 = 1;
						}
						else
						{
							alt9 = 2;
						}
					}
					else
					{
						alt9 = 3;
					}
				}
				else if (((LA9_1>='4' && LA9_1<='7')))
				{
					int LA9_3 = input.LA(3);

					if (((LA9_3>='0' && LA9_3<='7')))
					{
						alt9 = 2;
					}
					else
					{
						alt9 = 3;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// CCompiler.g:101:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(101, 9);
				Match('\\'); 
				DebugLocation(101, 14);
				input.Consume();

				DebugLocation(101, 25);
				input.Consume();

				DebugLocation(101, 36);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CCompiler.g:102:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(102, 9);
				Match('\\'); 
				DebugLocation(102, 14);
				input.Consume();

				DebugLocation(102, 25);
				input.Consume();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// CCompiler.g:103:9: '\\\\' ( '0' .. '7' )
				{
				DebugLocation(103, 9);
				Match('\\'); 
				DebugLocation(103, 14);
				input.Consume();


				}
				break;

			}
		}
		finally
		{
			TraceOut("OctalEscape", 41);
			LeaveRule("OctalEscape", 41);
			LeaveRule_OctalEscape();
		}
	}
	// $ANTLR end "OctalEscape"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 42);
		TraceIn("STRING", 42);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:106:7: ( '\"' ( EscapeSequence |~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// CCompiler.g:107:3: '\"' ( EscapeSequence |~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(107, 3);
			Match('\"'); 
			DebugLocation(107, 7);
			// CCompiler.g:107:7: ( EscapeSequence |~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=3;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0=='\\'))
				{
					alt10 = 1;
				}
				else if (((LA10_0>='\u0000' && LA10_0<='!')||(LA10_0>='#' && LA10_0<='[')||(LA10_0>=']' && LA10_0<='\uFFFF')))
				{
					alt10 = 2;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// CCompiler.g:107:9: EscapeSequence
					{
					DebugLocation(107, 9);
					mEscapeSequence(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// CCompiler.g:107:26: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(107, 26);
					input.Consume();


					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(107, 41);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 42);
			LeaveRule("STRING", 42);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_INCLUDE_STRING();
	partial void LeaveRule_INCLUDE_STRING();

	// $ANTLR start "INCLUDE_STRING"
	[GrammarRule("INCLUDE_STRING")]
	private void mINCLUDE_STRING()
	{
		EnterRule_INCLUDE_STRING();
		EnterRule("INCLUDE_STRING", 43);
		TraceIn("INCLUDE_STRING", 43);
		try
		{
			int _type = INCLUDE_STRING;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:110:15: ( '<' (~ '>' )* '>' )
			DebugEnterAlt(1);
			// CCompiler.g:111:3: '<' (~ '>' )* '>'
			{
			DebugLocation(111, 3);
			Match('<'); 
			DebugLocation(111, 7);
			// CCompiler.g:111:7: (~ '>' )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if (((LA11_0>='\u0000' && LA11_0<='=')||(LA11_0>='?' && LA11_0<='\uFFFF')))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// CCompiler.g:
					{
					DebugLocation(111, 7);
					input.Consume();


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(111, 13);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INCLUDE_STRING", 43);
			LeaveRule("INCLUDE_STRING", 43);
			LeaveRule_INCLUDE_STRING();
		}
	}
	// $ANTLR end "INCLUDE_STRING"

	partial void EnterRule_SEMI();
	partial void LeaveRule_SEMI();

	// $ANTLR start "SEMI"
	[GrammarRule("SEMI")]
	private void mSEMI()
	{
		EnterRule_SEMI();
		EnterRule("SEMI", 44);
		TraceIn("SEMI", 44);
		try
		{
			int _type = SEMI;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:114:5: ( ';' )
			DebugEnterAlt(1);
			// CCompiler.g:114:7: ';'
			{
			DebugLocation(114, 7);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMI", 44);
			LeaveRule("SEMI", 44);
			LeaveRule_SEMI();
		}
	}
	// $ANTLR end "SEMI"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 45);
		TraceIn("COMMA", 45);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:115:6: ( ',' )
			DebugEnterAlt(1);
			// CCompiler.g:115:8: ','
			{
			DebugLocation(115, 8);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 45);
			LeaveRule("COMMA", 45);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_IDENT();
	partial void LeaveRule_IDENT();

	// $ANTLR start "IDENT"
	[GrammarRule("IDENT")]
	private void mIDENT()
	{
		EnterRule_IDENT();
		EnterRule("IDENT", 46);
		TraceIn("IDENT", 46);
		try
		{
			int _type = IDENT;
			int _channel = DefaultTokenChannel;
			// CCompiler.g:118:6: ( LETTER ( LETTER | DIGIT )* )
			DebugEnterAlt(1);
			// CCompiler.g:119:3: LETTER ( LETTER | DIGIT )*
			{
			DebugLocation(119, 3);
			mLETTER(); 
			DebugLocation(119, 10);
			// CCompiler.g:119:10: ( LETTER | DIGIT )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if (((LA12_0>='0' && LA12_0<='9')||(LA12_0>='A' && LA12_0<='Z')||LA12_0=='_'||(LA12_0>='a' && LA12_0<='z')))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// CCompiler.g:
					{
					DebugLocation(119, 10);
					input.Consume();


					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENT", 46);
			LeaveRule("IDENT", 46);
			LeaveRule_IDENT();
		}
	}
	// $ANTLR end "IDENT"

	public override void mTokens()
	{
		// CCompiler.g:1:8: ( AND | DO | ELSE | FALSE | FOR | FUNCTION | IF | OR | RETURN | TRUE | VAR | WHILE | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | NOT | ADD | SUB | MUL | DIV | BIT_AND | BIT_OR | ASSIGN | GE | LE | NE | EQ | GT | LT | WS | ML_COMMENT | LINE_COMMENT | NUMBER | STRING | INCLUDE_STRING | SEMI | COMMA | IDENT )
		int alt13=42;
		try { DebugEnterDecision(13, false);
		try
		{
			alt13 = dfa13.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(13); }
		switch (alt13)
		{
		case 1:
			DebugEnterAlt(1);
			// CCompiler.g:1:10: AND
			{
			DebugLocation(1, 10);
			mAND(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// CCompiler.g:1:14: DO
			{
			DebugLocation(1, 14);
			mDO(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// CCompiler.g:1:17: ELSE
			{
			DebugLocation(1, 17);
			mELSE(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// CCompiler.g:1:22: FALSE
			{
			DebugLocation(1, 22);
			mFALSE(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// CCompiler.g:1:28: FOR
			{
			DebugLocation(1, 28);
			mFOR(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// CCompiler.g:1:32: FUNCTION
			{
			DebugLocation(1, 32);
			mFUNCTION(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// CCompiler.g:1:41: IF
			{
			DebugLocation(1, 41);
			mIF(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// CCompiler.g:1:44: OR
			{
			DebugLocation(1, 44);
			mOR(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// CCompiler.g:1:47: RETURN
			{
			DebugLocation(1, 47);
			mRETURN(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// CCompiler.g:1:54: TRUE
			{
			DebugLocation(1, 54);
			mTRUE(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// CCompiler.g:1:59: VAR
			{
			DebugLocation(1, 59);
			mVAR(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// CCompiler.g:1:63: WHILE
			{
			DebugLocation(1, 63);
			mWHILE(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// CCompiler.g:1:69: T__55
			{
			DebugLocation(1, 69);
			mT__55(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// CCompiler.g:1:75: T__56
			{
			DebugLocation(1, 75);
			mT__56(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// CCompiler.g:1:81: T__57
			{
			DebugLocation(1, 81);
			mT__57(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// CCompiler.g:1:87: T__58
			{
			DebugLocation(1, 87);
			mT__58(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// CCompiler.g:1:93: T__59
			{
			DebugLocation(1, 93);
			mT__59(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// CCompiler.g:1:99: T__60
			{
			DebugLocation(1, 99);
			mT__60(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// CCompiler.g:1:105: T__61
			{
			DebugLocation(1, 105);
			mT__61(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// CCompiler.g:1:111: NOT
			{
			DebugLocation(1, 111);
			mNOT(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// CCompiler.g:1:115: ADD
			{
			DebugLocation(1, 115);
			mADD(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// CCompiler.g:1:119: SUB
			{
			DebugLocation(1, 119);
			mSUB(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// CCompiler.g:1:123: MUL
			{
			DebugLocation(1, 123);
			mMUL(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// CCompiler.g:1:127: DIV
			{
			DebugLocation(1, 127);
			mDIV(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// CCompiler.g:1:131: BIT_AND
			{
			DebugLocation(1, 131);
			mBIT_AND(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// CCompiler.g:1:139: BIT_OR
			{
			DebugLocation(1, 139);
			mBIT_OR(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// CCompiler.g:1:146: ASSIGN
			{
			DebugLocation(1, 146);
			mASSIGN(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// CCompiler.g:1:153: GE
			{
			DebugLocation(1, 153);
			mGE(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// CCompiler.g:1:156: LE
			{
			DebugLocation(1, 156);
			mLE(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// CCompiler.g:1:159: NE
			{
			DebugLocation(1, 159);
			mNE(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// CCompiler.g:1:162: EQ
			{
			DebugLocation(1, 162);
			mEQ(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// CCompiler.g:1:165: GT
			{
			DebugLocation(1, 165);
			mGT(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// CCompiler.g:1:168: LT
			{
			DebugLocation(1, 168);
			mLT(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// CCompiler.g:1:171: WS
			{
			DebugLocation(1, 171);
			mWS(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// CCompiler.g:1:174: ML_COMMENT
			{
			DebugLocation(1, 174);
			mML_COMMENT(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// CCompiler.g:1:185: LINE_COMMENT
			{
			DebugLocation(1, 185);
			mLINE_COMMENT(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// CCompiler.g:1:198: NUMBER
			{
			DebugLocation(1, 198);
			mNUMBER(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// CCompiler.g:1:205: STRING
			{
			DebugLocation(1, 205);
			mSTRING(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// CCompiler.g:1:212: INCLUDE_STRING
			{
			DebugLocation(1, 212);
			mINCLUDE_STRING(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// CCompiler.g:1:227: SEMI
			{
			DebugLocation(1, 227);
			mSEMI(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// CCompiler.g:1:232: COMMA
			{
			DebugLocation(1, 232);
			mCOMMA(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// CCompiler.g:1:238: IDENT
			{
			DebugLocation(1, 238);
			mIDENT(); 

			}
			break;

		}

	}


	#region DFA
	DFA13 dfa13;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa13 = new DFA13(this, SpecialStateTransition13);
	}

	private class DFA13 : DFA
	{
		private const string DFA13_eotS =
			"\x1\xFFFF\x1\x22\x2\x20\x1\x1B\x1\x20\x1\x2A\x4\x20\x7\xFFFF\x1\x30\x1"+
			"\x31\x1\x32\x1\x33\x1\x36\x1\x18\x1\xFFFF\x1\x3A\x1\x3D\x8\xFFFF\x1\x3E"+
			"\x4\x20\x1\x43\x2\xFFFF\x4\x20\xA\xFFFF\x1\x49\x5\xFFFF\x2\x20\x1\x4C"+
			"\x1\x20\x1\xFFFF\x2\x20\x1\x50\x1\x20\x1\x18\x1\xFFFF\x1\x52\x1\x20\x1"+
			"\xFFFF\x2\x20\x1\x56\x1\xFFFF\x1\x20\x1\xFFFF\x1\x58\x2\x20\x1\xFFFF"+
			"\x1\x5B\x1\xFFFF\x1\x20\x1\x5D\x1\xFFFF\x1\x20\x1\xFFFF\x1\x5F\x1\xFFFF";
		private const string DFA13_eofS =
			"\x60\xFFFF";
		private const string DFA13_minS =
			"\x1\x9\x1\x26\x1\x6F\x1\x6C\x1\x30\x1\x66\x1\x3D\x1\x65\x1\x72\x1\x61"+
			"\x1\x68\x7\xFFFF\x4\x3D\x1\x2A\x1\x3D\x1\xFFFF\x1\x0\x1\x3D\x8\xFFFF"+
			"\x1\x30\x1\x73\x1\x6C\x1\x72\x1\x6E\x1\x30\x2\xFFFF\x1\x74\x1\x75\x1"+
			"\x72\x1\x69\x9\xFFFF\x2\x0\x5\xFFFF\x1\x65\x1\x73\x1\x30\x1\x63\x1\xFFFF"+
			"\x1\x75\x1\x65\x1\x30\x1\x6C\x1\x0\x1\xFFFF\x1\x30\x1\x65\x1\xFFFF\x1"+
			"\x74\x1\x72\x1\x30\x1\xFFFF\x1\x65\x1\xFFFF\x1\x30\x1\x69\x1\x6E\x1\xFFFF"+
			"\x1\x30\x1\xFFFF\x1\x6F\x1\x30\x1\xFFFF\x1\x6E\x1\xFFFF\x1\x30\x1\xFFFF";
		private const string DFA13_maxS =
			"\x1\x7D\x1\x3D\x1\x6F\x1\x6C\x1\x7A\x1\x66\x1\x7C\x1\x65\x1\x72\x1\x61"+
			"\x1\x68\x7\xFFFF\x6\x3D\x1\xFFFF\x1\xFFFF\x1\x3E\x8\xFFFF\x1\x7A\x1\x73"+
			"\x1\x6C\x1\x72\x1\x6E\x1\x7A\x2\xFFFF\x1\x74\x1\x75\x1\x72\x1\x69\x9"+
			"\xFFFF\x2\xFFFF\x5\xFFFF\x1\x65\x1\x73\x1\x7A\x1\x63\x1\xFFFF\x1\x75"+
			"\x1\x65\x1\x7A\x1\x6C\x1\xFFFF\x1\xFFFF\x1\x7A\x1\x65\x1\xFFFF\x1\x74"+
			"\x1\x72\x1\x7A\x1\xFFFF\x1\x65\x1\xFFFF\x1\x7A\x1\x69\x1\x6E\x1\xFFFF"+
			"\x1\x7A\x1\xFFFF\x1\x6F\x1\x7A\x1\xFFFF\x1\x6E\x1\xFFFF\x1\x7A\x1\xFFFF";
		private const string DFA13_acceptS =
			"\xB\xFFFF\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x6\xFFFF\x1\x1B"+
			"\x2\xFFFF\x1\x22\x1\x25\x1\x26\x1\x28\x1\x29\x1\x2A\x1\x1\x1\x19\x6\xFFFF"+
			"\x1\x8\x1\x1A\x4\xFFFF\x1\x1E\x1\x14\x1\x15\x1\x16\x1\x17\x1\x23\x1\x24"+
			"\x1\x18\x1\x1F\x2\xFFFF\x1\x21\x1\x27\x1\x1C\x1\x20\x1\x2\x4\xFFFF\x1"+
			"\x7\x5\xFFFF\x1\x1D\x2\xFFFF\x1\x5\x3\xFFFF\x1\xB\x1\xFFFF\x1\x3\x3\xFFFF"+
			"\x1\xA\x1\xFFFF\x1\x4\x2\xFFFF\x1\xC\x1\xFFFF\x1\x9\x1\xFFFF\x1\x6";
		private const string DFA13_specialS =
			"\x19\xFFFF\x1\x2\x1E\xFFFF\x1\x3\x1\x0\xE\xFFFF\x1\x1\x17\xFFFF}>";
		private static readonly string[] DFA13_transitionS =
			{
				"\x2\x1B\x2\xFFFF\x1\x1B\x12\xFFFF\x1\x1B\x1\x12\x1\x1D\x1\xB\x1\xFFFF"+
				"\x1\x18\x1\x1\x1\xFFFF\x1\xC\x1\xD\x1\x15\x1\x13\x1\x1F\x1\x14\x1\xFFFF"+
				"\x1\x16\xA\x1C\x1\xFFFF\x1\x1E\x1\x19\x1\x17\x1\x1A\x2\xFFFF\x1A\x20"+
				"\x1\xE\x1\xFFFF\x1\xF\x1\x18\x1\x20\x1\xFFFF\x3\x20\x1\x2\x1\x3\x1\x4"+
				"\x2\x20\x1\x5\x8\x20\x1\x7\x1\x20\x1\x8\x1\x20\x1\x9\x1\xA\x3\x20\x1"+
				"\x10\x1\x6\x1\x11",
				"\x1\x21\x16\xFFFF\x1\x18",
				"\x1\x23",
				"\x1\x24",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1\x25\xD\x20\x1"+
				"\x26\x5\x20\x1\x27\x5\x20",
				"\x1\x28",
				"\x1\x18\x3E\xFFFF\x1\x29",
				"\x1\x2B",
				"\x1\x2C",
				"\x1\x2D",
				"\x1\x2E",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2F",
				"\x1\x18",
				"\x1\x18",
				"\x1\x18",
				"\x1\x34\x4\xFFFF\x1\x35\xD\xFFFF\x1\x18",
				"\x1\x37",
				"",
				"\x3C\x3B\x1\x38\x1\x39\xFFC2\x3B",
				"\x1\x3C\x1\x18",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x3F",
				"\x1\x40",
				"\x1\x41",
				"\x1\x42",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"",
				"",
				"\x1\x44",
				"\x1\x45",
				"\x1\x46",
				"\x1\x47",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x3D\x3B\x1\x48\xFFC2\x3B",
				"\x0\x3B",
				"",
				"",
				"",
				"",
				"",
				"\x1\x4A",
				"\x1\x4B",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x4D",
				"",
				"\x1\x4E",
				"\x1\x4F",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x51",
				"\x0\x3B",
				"",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x53",
				"",
				"\x1\x54",
				"\x1\x55",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"",
				"\x1\x57",
				"",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x59",
				"\x1\x5A",
				"",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"",
				"\x1\x5C",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"",
				"\x1\x5E",
				"",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				""
			};

		private static readonly short[] DFA13_eot = DFA.UnpackEncodedString(DFA13_eotS);
		private static readonly short[] DFA13_eof = DFA.UnpackEncodedString(DFA13_eofS);
		private static readonly char[] DFA13_min = DFA.UnpackEncodedStringToUnsignedChars(DFA13_minS);
		private static readonly char[] DFA13_max = DFA.UnpackEncodedStringToUnsignedChars(DFA13_maxS);
		private static readonly short[] DFA13_accept = DFA.UnpackEncodedString(DFA13_acceptS);
		private static readonly short[] DFA13_special = DFA.UnpackEncodedString(DFA13_specialS);
		private static readonly short[][] DFA13_transition;

		static DFA13()
		{
			int numStates = DFA13_transitionS.Length;
			DFA13_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA13_transition[i] = DFA.UnpackEncodedString(DFA13_transitionS[i]);
			}
		}

		public DFA13( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 13;
			this.eot = DFA13_eot;
			this.eof = DFA13_eof;
			this.min = DFA13_min;
			this.max = DFA13_max;
			this.accept = DFA13_accept;
			this.special = DFA13_special;
			this.transition = DFA13_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( AND | DO | ELSE | FALSE | FOR | FUNCTION | IF | OR | RETURN | TRUE | VAR | WHILE | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | NOT | ADD | SUB | MUL | DIV | BIT_AND | BIT_OR | ASSIGN | GE | LE | NE | EQ | GT | LT | WS | ML_COMMENT | LINE_COMMENT | NUMBER | STRING | INCLUDE_STRING | SEMI | COMMA | IDENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition13(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA13_57 = input.LA(1);

				s = -1;
				if (((LA13_57>='\u0000' && LA13_57<='\uFFFF'))) {s = 59;}

				else s = 73;

				if (s >= 0) return s;
				break;

			case 1:
				int LA13_72 = input.LA(1);

				s = -1;
				if (((LA13_72>='\u0000' && LA13_72<='\uFFFF'))) {s = 59;}

				else s = 24;

				if (s >= 0) return s;
				break;

			case 2:
				int LA13_25 = input.LA(1);

				s = -1;
				if ((LA13_25=='<')) {s = 56;}

				else if ((LA13_25=='=')) {s = 57;}

				else if (((LA13_25>='\u0000' && LA13_25<=';')||(LA13_25>='>' && LA13_25<='\uFFFF'))) {s = 59;}

				else s = 58;

				if (s >= 0) return s;
				break;

			case 3:
				int LA13_56 = input.LA(1);

				s = -1;
				if ((LA13_56=='=')) {s = 72;}

				else if (((LA13_56>='\u0000' && LA13_56<='<')||(LA13_56>='>' && LA13_56<='\uFFFF'))) {s = 59;}

				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 13, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
 
	#endregion

}
